# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Deploy to prod

on:
  pull_request:
    branches: [ prod ]

jobs:
  provision:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform
    
    steps:
    - uses: actions/checkout@v3

    - name: Verify Terraform version
      run: terraform --version
    
    - name: Create tfvars
      env:
        TF_AWS_ACCESS_KEY: ${{ secrets.TF_AWS_ACCESS_KEY }}
        TF_AWS_SECRET_KEY: ${{ secrets.TF_AWS_SECRET_KEY }}
        TF_AWS_KEY_PAIR: ${{ secrets.TF_AWS_KEY_PAIR }}
      run: |
        touch ./terraform.tfvars
        echo aws_access_key = \"$TF_AWS_ACCESS_KEY\" >> terraform.tfvars
        echo aws_secret_key = \"$TF_AWS_SECRET_KEY\" >> terraform.tfvars
        echo aws_key_pair = \"$TF_AWS_KEY_PAIR\" >> terraform.tfvars
      
    - name: Create backend config
      env:
        TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
        TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
        TF_BACKEND_SHARED_CRED: ${{ secrets.TF_BACKEND_SHARED_CRED }}
        TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
        TF_BACKEND_ENDPOINT: ${{ secrets.TF_BACKEND_ENDPOINT }}
        TF_BACKEND_AWS_ACCESS_KEY_ID: ${{ secrets.TF_BACKEND_AWS_ACCESS_KEY_ID }}
        TF_BACKEND_AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_BACKEND_AWS_SECRET_ACCESS_KEY }}
      run: |
        touch ./backend.conf
        echo bucket = \"$TF_BACKEND_BUCKET\" >> backend.conf
        echo key = \"$TF_BACKEND_KEY\" >> backend.conf
        echo shared_credentials_file = \"~/.oci/$TF_BACKEND_SHARED_CRED\" >> backend.conf
        echo region = \"$TF_BACKEND_REGION\" >> backend.conf
        echo endpoint = \"$TF_BACKEND_ENDPOINT\" >> backend.conf
        echo skip_region_validation = true >> backend.conf
        echo skip_credentials_validation = true >> backend.conf
        echo skip_metadata_api_check = true >> backend.conf
        echo force_path_style = true >> backend.conf

        mkdir ~/.oci
        cd ~/.oci
        touch $TF_BACKEND_SHARED_CRED 
        echo \[default\] >> $TF_BACKEND_SHARED_CRED
        echo aws_access_key_id=$TF_BACKEND_AWS_ACCESS_KEY_ID >> $TF_BACKEND_SHARED_CRED
        echo aws_secret_access_key=$TF_BACKEND_AWS_SECRET_ACCESS_KEY >> $TF_BACKEND_SHARED_CRED

    - name: Init 
      run: terraform init -backend-config=backend.conf

    - name: Plan
      run: terraform plan

    - name: Apply
      run: terraform apply -auto-approve
    
  build:
    needs: provision
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./

    steps:
    - name: SSH
      uses: appleboy/ssh-action@dce9d565de8d876c11d93fa4fe677c0285a66d78
      env:
        PUB_OS_NAMESPACE: ${{ secrets.PUB_OS_NAMESPACE }}
        PUB_OS_BUCKET_NAME: ${{ secrets.PUB_OS_BUCKET_NAME }}
        PUB_OS_TIMER: ${{ secrets.PUB_OS_TIMER }}
        PUB_OS_IMAGE_EXT: ${{ secrets.PUB_OS_TIMER }}
        PUB_OS_URL: ${{ secrets.PUB_OS_TIMER }}
        PRIV_OS_NAMESPACE: ${{ secrets.PRIV_OS_NAMESPACE }}
        PRIV_OS_BUCKET_NAME: ${{ secrets.PRIV_OS_BUCKET_NAME }}
        PRIV_OS_TIMER: ${{ secrets.PRIV_OS_TIMER }}
        PRIV_OS_VID_EXT: ${{ secrets.PRIV_OS_VID_EXT }}
        PRIV_OS_URL: ${{ secrets.PRIV_OS_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        JWT_ACCESS_EXPIRE: ${{ secrets.JWT_ACCESS_EXPIRE }}
        JWT_REFRESH_EXPIRE: ${{ secrets.JWT_REFRESH_EXPIRE }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        OMISE_PUBLIC_KEY: ${{ secrets.OMISE_PUBLIC_KEY }}
        OMISE_SECRET_KEY: ${{ secrets.OMISE_SECRET_KEY }}
        OMISE_RETURN_URL: ${{ secrets.OMISE_RETURN_URL }}
        LOGIN_USERNAME: ${{ secrets.LOGIN_USERNAME }}
        DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        KEY_STORE_PW: ${{ secrets.KEY_STORE_PW }}
        EMAIL: ${{ secrets.EMAIL }}
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        envs: 
          PUB_OS_NAMESPACE,
          PUB_OS_BUCKET_NAME,
          PUB_OS_TIMER,
          PUB_OS_IMAGE_EXT,
          PUB_OS_URL,
          PRIV_OS_NAMESPACE,
          PRIV_OS_BUCKET_NAME,
          PRIV_OS_TIMER,
          PRIV_OS_VID_EXT,
          PRIV_OS_URL,
          JWT_SECRET,
          JWT_ACCESS_EXPIRE,
          JWT_REFRESH_EXPIRE,
          DATABASE_URL,
          DATABASE_USERNAME,
          DATABASE_PASSWORD,
          OMISE_PUBLIC_KEY,
          OMISE_SECRET_KEY,
          OMISE_RETURN_URL,
          LOGIN_USERNAME,
          DOMAIN_NAME,
          KEY_STORE_PW,
          EMAIL
        script: |
          if cd v-ed; \
          then \
            git pull origin disabled-features; \
          else \
            git clone -b disabled-features https://github.com/sjnp/v-ed.git; \
            cd v-ed; \
          fi
          git status
          if cd backend/src/main/resources; \
          then \
            rm application.properties; \
            cd ../../../../; \
            pwd; \
          else \
            mkdir backend/src/main/resources; \
          fi

          docker compose down --rmi all
          cp ./nginx/my_conf/nginx_init.conf ./nginx/conf/nginx.conf
          sed -i 's/DOMAIN/${{ secrets.DOMAIN_NAME }}/g' ./nginx/conf/nginx.conf
          docker compose up -d nginx

          touch backend/src/main/resources/application.properties
          echo spring.datasource.driver-class-name=org.postgresql.Driver \
          >> backend/src/main/resources/application.properties
          echo spring.datasource.url=$DATABASE_URL >> backend/src/main/resources/application.properties
          echo spring.datasource.username=$DATABASE_USERNAME >> backend/src/main/resources/application.properties
          echo spring.datasource.password=$DATABASE_PASSWORD >> backend/src/main/resources/application.properties
          echo "
          spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
          spring.jpa.hibernate.ddl-auto=update
          spring.jpa.properties.hibernate.check_nullability=true
          spring.jpa.properties.hibernate.format_sql=true" >> backend/src/main/resources/application.properties
          echo public-object-storage.namespace=$PUB_OS_NAMESPACE >> backend/src/main/resources/application.properties
          echo public-object-storage.bucket-name=$PUB_OS_BUCKET_NAME >> backend/src/main/resources/application.properties
          echo public-object-storage.expiry-timer=$PUB_OS_TIMER >> backend/src/main/resources/application.properties
          echo public-object-storage.viable-image-extensions=$PUB_OS_IMAGE_EXT \
          >> backend/src/main/resources/application.properties
          echo public-object-storage.regional-object-storage-uri=$PUB_OS_URL \
          >> backend/src/main/resources/application.properties
          echo private-object-storage.namespace=$PRIV_OS_NAMESPACE >> backend/src/main/resources/application.properties
          echo private-object-storage.bucket-name=$PRIV_OS_BUCKET_NAME >> backend/src/main/resources/application.properties
          echo private-object-storage.expiry-timer=$PRIV_OS_TIMER >> backend/src/main/resources/application.properties
          echo private-object-storage.viable-video-extensions=$PRIV_OS_VID_EXT \
          >> backend/src/main/resources/application.properties
          echo private-object-storage.regional-object-storage-uri=$PRIV_OS_URL \
          >> backend/src/main/resources/application.properties
          echo omise-key.public-key=$OMISE_PUBLIC_KEY >> backend/src/main/resources/application.properties
          echo omise-key.secret-key=$OMISE_SECRET_KEY >> backend/src/main/resources/application.properties
          echo omise-key.recipient-url=https://api.omise.co/recipients >> backend/src/main/resources/application.properties
          echo omise-key.transfer-url=https://api.omise.co/transfers >> backend/src/main/resources/application.properties
          echo omise-key.source-url=https://api.omise.co/sources >> backend/src/main/resources/application.properties
          echo omise-key.charge-url=https://api.omise.co/charges >> backend/src/main/resources/application.properties
          echo omise-key.return-url=$OMISE_RETURN_URL >> backend/src/main/resources/application.properties
          echo "
          role.student=STUDENT
          role.instructor=INSTRUCTOR
          role.admin=ADMIN
          category.academic=ACADEMIC
          category.art=ART
          category.business=BUSINESS
          category.design=DESIGN
          category.programming=PROGRAMMING
          comment-state.owner=OWNER
          comment-state.instructor=INSTRUCTOR
          comment-state.student=STUDENT
          course-state.incomplete=INCOMPLETE
          course-state.pending=PENDING
          course-state.approved=APPROVED
          course-state.rejected=REJECTED
          course-state.published=PUBLISHED
          report-state.pending=PENDING
          report-state.approved=APPROVED
          report-state.rejected=REJECTED" >> backend/src/main/resources/application.properties
          echo login.username=$LOGIN_USERNAME >> backend/src/main/resources/application.properties
          echo json-web-token.secret=$JWT_SECRET >> backend/src/main/resources/application.properties
          echo json-web-token.access-token-expires-at=$JWT_ACCESS_EXPIRE >> backend/src/main/resources/application.properties 
          echo json-web-token.refresh-token-expires-at=$JWT_REFRESH_EXPIRE >> backend/src/main/resources/application.properties
          
          docker compose run --rm certbot certonly --webroot --webroot-path /var/www/certbot/ --email $EMAIL --agree-tos --no-eff-email --dry-run -d $DOMAIN_NAME; \
          docker compose restart
          docker compose run --rm certbot certonly --webroot --webroot-path /var/www/certbot/ --email $EMAIL --agree-tos --no-eff-email -d $DOMAIN_NAME; \

          cp ./nginx/my_conf/nginx_last.conf ./nginx/conf/nginx.conf
          sed -i 's/DOMAIN/${{ secrets.DOMAIN_NAME }}/g' ./nginx/conf/nginx.conf
          docker compose restart

          sudo rm -rf ./keys
          mkdir keys
          sudo cp ./certbot/conf/live/$DOMAIN_NAME/fullchain.pem ./keys/fullchain.pem
          sudo cp ./certbot/conf/live/$DOMAIN_NAME/privkey.pem ./keys/privkey.pem
          sudo cp ./certbot/conf/live/$DOMAIN_NAME/chain.pem ./keys/chain.pem
          sudo cp ./certbot/conf/live/$DOMAIN_NAME/cert.pem ./keys/cert.pem
          cd keys
          sudo chmod +44 privkey.pem
          openssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out keystore.p12 -name tomcat -CAfile chain.pem -caname root -password pass:${{ secrets.KEY_STORE_PW }}
          cd ../
          cp ./keys/keystore.p12 ./backend/src/main/resources/keystore.p12
          echo server.port: 8443 >> backend/src/main/resources/application.properties
          echo security.require-ssl=true >> backend/src/main/resources/application.properties
          echo server.ssl.key-store=classpath:keystore.p12 >> backend/src/main/resources/application.properties
          echo server.ssl.key-store-password=$KEY_STORE_PW >> backend/src/main/resources/application.properties
          echo server.ssl.key-store-type=PKCS12 >> backend/src/main/resources/application.properties
          echo server.ssl.key-alias=tomcat >> backend/src/main/resources/application.properties

          cd ./backend
          mvn package -Dmaven.test.skip
          cd ..
          docker compose up -d backend

          sed -i 's/http:\/\/localhost:8080/https:\/\/${{ secrets.DOMAIN_NAME }}/g' ./frontend/src/api/axios.js
          docker compose up -d frontend

            

    # - name: Run jar file
    #   run: |
    #     cd ./backend/target
    #     java -jar backend-0.0.1-SNAPSHOT.jar